using PostgreSQL;
using Bot_Keyboards;
using ConfigFile;
using CommandsSpace;

using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.InputFiles;
using Telegram.Bot.Types.ReplyMarkups;

using System;
using System.Text.RegularExpressions;
using System.Globalization;

// States
// using States;

namespace MessageHandler
{
    public static class MessHandler
    {
        public static async Task BotOnMessageReceived(ITelegramBotClient botClient, Message message)
        {
            try
            {
                long chatId = message.Chat.Id;
                string? messageText = message.Text;
                int messageId = message.MessageId;
                string? username = message.Chat.Username;
                string? firstName = message.Chat.FirstName;

                if(messageText![0]=='/')
                {
                    if(messageText!.Contains("/start"))
                    {   
                        if(chatId.ToString()[0]=='-'){ return; }
                        else if(UserDB.CheckUser(chatId))
                        {
                            if(UserDB.GetWallet(chatId)=="–ù–µ —É–∫–∞–∑–∞–Ω")
                            {
                                await botClient.SendTextMessageAsync(
                                    chatId: chatId,
                                    text: $"–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–≤–æ–µ–≥–æ <b>TON</b> –∫–æ—à–µ–ª—å–∫–∞ (–ø—Ä–∏–º. Tonkeeper, Toncoin)\n\n–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –±–µ–∑–æ—à–∏–±–æ—á–Ω–æ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –∑–∞ –Ω–∏–º –∫—É–ø–ª–µ–Ω–Ω—ã–µ NFT.",
                                    parseMode: ParseMode.Html,
                                    replyMarkup: Keyboards.InputToncoinKb
                                );
                            }
                            else
                            {
                                UserDB.UpdateState(chatId, "MainMenu");
                                await botClient.SendTextMessageAsync(
                                    chatId: chatId,
                                    text: $"<b>PRESALE TON DOODLES...<a href=\"https://t.me/TonDoodlesNFT\">üíé</a>\n\n –ù–∞—à –ö–∞–Ω–∞–ª: </b>@TonDoodlesNFT",
                                    parseMode: ParseMode.Html,
                                    replyMarkup: Keyboards.MenuKb
                                );
                            }
                            return;
                        }
                        else
                        {
                            try
                            {
                                UserDB.CreateUser(chatId, username!);
                                await botClient.SendTextMessageAsync(
                                    chatId: chatId,
                                    text: $"<b>PRESALE TON DOODLES...<a href=\"https://t.me/TonDoodlesNFT\">üíé</a>\n\n –ù–∞—à –ö–∞–Ω–∞–ª: </b>@TonDoodlesNFT",
                                    parseMode: ParseMode.Html
                                );
                                
                                await botClient.SendTextMessageAsync(
                                    chatId: chatId,
                                    text: $"<b>üíé –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –í–∞—à —Ç–µ–∫—É—â–∏–π TON –∫–æ—à–µ–ª—ë–∫.</b>",
                                    parseMode: ParseMode.Html,
                                    replyMarkup: Keyboards.InputToncoinKb
                                );
                            }
                            catch(Exception)
                            {
                                await botClient.SendTextMessageAsync(
                                    chatId: chatId,
                                    text: $"<b>üíé –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å @username.</b>",
                                    parseMode: ParseMode.Html
                                );
                            }
                            return;
                        }
                    }
                    else
                    {
                        // –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
                        if(chatId==Config.adminChannel)
                        {
                            Commands.AdminCommnads(botClient, messageText!, chatId, messageId);
                            return;
                        }
                        else if(CheckSubChannel(botClient.GetChatMemberAsync(Config.adminChannel, chatId).Result.Status.ToString()))
                        {
                            Commands.AdminCommnads(botClient, messageText!, chatId, messageId);
                            return;
                        }
                    }
                }


                switch(messageText)
                {
                    case "üíº –ú–æ–π –ö–æ—à–µ–ª–µ–∫":
                        UserDB.UpdateState(chatId, "MainMenu");
                        await botClient.SendTextMessageAsync(
                            chatId: chatId,
                            text: $"<b>üíº–ö–æ—à–µ–ª–µ–∫ TON</b>\n\n<b>–ê–∞–¥—Ä–µ—Å:</b>\n<code>{UserDB.GetWallet(chatId)}</code>",
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.NewToncoinWalletKb
                        );
                        return;
                    case "üíé –ö—É–ø–∏—Ç—å NFT":

                        UserDB.UpdateState(chatId, "MainMenu");
                        if(UserDB.GetWallet(chatId)=="–ù–µ —É–∫–∞–∑–∞–Ω")
                        {
                            await botClient.SendTextMessageAsync(
                                chatId: chatId,
                                text: $"üìù –î–ª—è –ø–æ–∫—É–ø–∫–∏ NFT –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–≤–æ–µ–≥–æ <b>TON</b> –∫–æ—à–µ–ª—å–∫–∞ (–ø—Ä–∏–º. Tonkeeper, Toncoin Wallet)\n\n–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –±–µ–∑–æ—à–∏–±–æ—á–Ω–æ –∑–∞–∫—Ä–µ–ø–∏—Ç—å –∑–∞ –Ω–∏–º –∫—É–ø–ª–µ–Ω–Ω—ã–µ NFT.",
                                parseMode: ParseMode.Html,
                                replyMarkup: Keyboards.InputToncoinKb
                            );
                            return;
                        }
                        else
                        {
                            await botClient.SendTextMessageAsync(
                                chatId: chatId,
                                text: $"<b>üíé –¶–µ–Ω–∞ NFT –≤–æ –≤—Ä–µ–º—è PRESALE 2:</b>\n\n–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 1 NFT: <code>59 TON / 1 —à—Ç</code>\n–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 3 NFT: <code>54 TON / 1 —à—Ç</code>\n–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 5 NFT: <code>49 TON / 1 —à—Ç</code>\n–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 10 NFT: <code>44 TON / 1 —à—Ç</code>\n–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 15 NFT: <code>39 TON / 1 —à—Ç</code>\n\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ: <b>{UserDB.GetTotalNftNumber()} –∏–∑ 1111 NFT</b> –ø–æ —Ü–µ–Ω–µ –æ—Ç 39 TON",
                                parseMode: ParseMode.Html,
                                replyMarkup: Keyboards.BuyNftKb
                            );
                            return;
                        }
                    case "‚ùì –ü–æ–º–æ—â—å":
                        UserDB.UpdateState(chatId, "MainMenu");
                        await botClient.SendTextMessageAsync(
                            chatId: chatId,
                            text: $"<b>ü§ï–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–º–æ—â—å?</b>\n–ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –≤–æ –≤—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏, –∏–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫–∞—Å–∞–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º - —Å–º–µ–ª–æ —Å–≤—è–∑—ã–≤–∞–π—Ç–µ—Å—å —Å –Ω–∞–º–∏!\n\n<b>üíé–ù–∞—à –ö–æ–Ω—Ç–∞–∫—Ç:</b> @MerIinBodro",
                            parseMode: ParseMode.Html,
                            replyMarkup: Keyboards.InfoKb
                        );
                        return;
                    case "üôä –ú–æ–∏ NFT":
                        UserDB.UpdateState(chatId, "MainMenu");
                        string purchasedNft = UserDB.GetParsedNftCount(chatId);
                        await botClient.SendTextMessageAsync(
                            chatId: chatId,
                            text: $"<b>üôà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: </b>@{username}\n\n<b>–ö—É–ø–ª–µ–Ω–æ –≤–æ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ –°–µ–π–ª–∞: </b>{purchasedNft}\n<b>–ö—É–ø–ª–µ–Ω–æ –í—Å–µ–≥–æ: </b>{purchasedNft}<b>üíéROUND CLASS:</b> 0\n<b>üíéSIMS CLASS:</b> 0\n<b>üíéEMERALD CLASS:</b> 0\n<b>üíéMYTHICAL CLASS:</b> 0",
                            parseMode: ParseMode.Html
                        );
                        return;
                }

                switch (UserDB.state(chatId))
                {
                    case "MainMenu":
                        return;
                    case "Wallet":
                        string wallet = messageText;
                        if(CheckWalletRight(wallet))
                        {
                            if(UserDB.GetWallet(chatId)=="–ù–µ —É–∫–∞–∑–∞–Ω")
                            {
                                if(UserDB.CheckWallet(wallet))
                                {
                                    await botClient.SendTextMessageAsync(
                                        chatId: chatId,
                                        text: $"<b>–î–∞–Ω–Ω—ã–π TON –∫–æ—à–µ–ª–µ–∫ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É‚Ä¶\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –∫–æ—à–µ–ª—å–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –Ω–∞—à–µ–º—É –±–æ—Ç—É!\n\n‚§µÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:</b>",
                                        parseMode: ParseMode.Html
                                    );
                                    return;
                                }
                                else
                                {
                                    UserDB.UpdateWallet(chatId, wallet);
                                    UserDB.UpdateState(chatId, "MainMenu");
                                
                                    await botClient.SendTextMessageAsync(
                                        chatId: chatId,
                                        text: $"<b>üíé –í–∞—à —Ç–µ–∫—É—â–∏–π TON –∞–¥—Ä–µ—Å: </b><code>{wallet}</code>",
                                        parseMode: ParseMode.Html,
                                        replyMarkup: Keyboards.MenuKb
                                    );
                                    
                                    await botClient.SendTextMessageAsync(
                                        chatId: Config.adminChannel,
                                        text: $"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.</b>\n\n<b>üÜî ID: </b><code>{chatId}</code>\n<b>üíº –ö–æ—à–µ–ª—ë–∫: </b><code>{wallet}</code>",
                                        parseMode: ParseMode.Html
                                    );
                                    return;
                                }
                            }
                            else
                            {
                                if(UserDB.CheckWallet(wallet))
                                {
                                    await botClient.SendTextMessageAsync(
                                        chatId: chatId,
                                        text: $"<b>–î–∞–Ω–Ω—ã–π TON –∫–æ—à–µ–ª–µ–∫ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É‚Ä¶\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –∫–æ—à–µ–ª—å–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –Ω–∞—à–µ–º—É –±–æ—Ç—É!\n\n‚§µÔ∏è –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:</b>",
                                        parseMode: ParseMode.Html
                                    );
                                    return;
                                }
                                else
                                {
                                    UserDB.UpdateWallet(chatId, wallet);
                                    UserDB.UpdateState(chatId, "MainMenu");
                                
                                    await botClient.SendTextMessageAsync(
                                        chatId: chatId,
                                        text: $"<b>üíé –í–∞—à —Ç–µ–∫—É—â–∏–π TON –∞–¥—Ä–µ—Å: </b><code>{wallet}</code>",
                                        parseMode: ParseMode.Html,
                                        replyMarkup: Keyboards.MenuKb
                                    );
                                    await botClient.SendTextMessageAsync(
                                        chatId: Config.adminChannel,
                                        text: $"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∏–∑–º–µ–Ω–∏–ª —Å–≤–æ–π –∫–æ—à–µ–ª—ë–∫.</b>\n\n<b>üÜî ID: </b><code>{chatId}</code>\n<b>üíº –ö–æ—à–µ–ª—ë–∫: </b><code>{wallet}</code>",
                                        parseMode: ParseMode.Html
                                    );
                                    return;
                                }
                            }
                        }
                        else
                        {
                            await botClient.SendTextMessageAsync(
                                chatId: chatId,
                                text: $"<b>‚ò†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ TON –∫–æ—à–µ–ª—å–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n\n –ö–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–æ—à–µ–ª—ë–∫? </b> <code>EQAXFiR6KO1YJmiNOnlRzrkJUQARVU-audCjU53PCD4GR_93</code>",
                                parseMode: ParseMode.Html,
                                replyMarkup: Keyboards.MenuKb
                            );
                        }
                        return;
                    case "NumberOfNft":
                        if(int.TryParse(messageText, out int number) && Int32.Parse(messageText) > 0)
                        {
                            int nftNumber = Int32.Parse(messageText);
                            if(Int32.Parse(UserDB.GetTotalNftNumber()) >= nftNumber)
                            {
                                UserDB.UpdateNftNumber(chatId, nftNumber);
                                GenerateIdentifier(chatId);
                                
                                await botClient.SendTextMessageAsync(
                                    chatId: chatId,
                                    text: GetTotalPrice(chatId, nftNumber),
                                    parseMode: ParseMode.Html,
                                    replyMarkup: Keyboards.PaymentKb(chatId)
                                );
                                
                                await botClient.SendTextMessageAsync(
                                    chatId: Config.adminChannel,
                                    text: $"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} c–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É.</b>\n\n<b>–ö–æ–ª-–≤–æ NFT: </b><code>{UserDB.GetAllInfo(chatId)[1]}</code>\n<b>–û–±—â–∞—è —Ü–µ–Ω–∞: </b><code>{UserDB.GetAllInfo(chatId)[2]} TON</code>\n<b>–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: </b><code>{UserDB.GetAllInfo(chatId)[3]}</code>",
                                    parseMode: ParseMode.Html
                                );
                            }
                            else
                            {
                                await botClient.SendTextMessageAsync(
                                    chatId: chatId,
                                    text: $"<b>‚ò†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö. –û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ {UserDB.GetTotalNftNumber()} NFT. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ NFT –ø–æ–≤—Ç–æ—Ä–Ω–æ.</b>",
                                    parseMode: ParseMode.Html
                                );
                            }
                        }
                        else
                        {
                            await botClient.SendTextMessageAsync(
                                chatId: chatId,
                                text: "<b>‚ò†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ NFT –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 0. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ NFT –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</b>",
                                parseMode: ParseMode.Html
                            );
                        }
                        return;
                }
            }
            catch(Exception e){ return; }
        }

        private static string GetTotalPrice(long chatId, int nftNumber)
        {
            int price;
            int totalPrice;
            string text;
            if(nftNumber >= 1 && nftNumber < 3)
            {
                price = 59;
                totalPrice = price * nftNumber;
                UserDB.UpdateTotalPrice(chatId, totalPrice);
                text = $"<b>üìé –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É {nftNumber} NFT.</b>\n\n<b>–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏: </b><code>{price} TON / 1 —à—Ç.</code>\n<b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: </b><code>{totalPrice}</code><b> TON.</b>\n\n<b>–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–û–ø–ª–∞—Ç–∏—Ç—å</b> –∏–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:</b>\n<b>–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: </b><code>{UserDB.GetTONWallet()}</code>\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: </b><code>{UserDB.GetAllInfo(chatId)[3]}</code>";
                return text;
            }
            else if(nftNumber >= 3 && nftNumber < 5)
            {
                price = 54;
                totalPrice = price * nftNumber;
                UserDB.UpdateTotalPrice(chatId, totalPrice);
                text = $"<b>üìé –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É {nftNumber} NFT.</b>\n\n<b>–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏: </b><code>{price} TON / 1 —à—Ç.</code>\n<b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: </b><code>{totalPrice}</code><b> TON.</b>\n\n<b>–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–û–ø–ª–∞—Ç–∏—Ç—å</b> –∏–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:</b>\n<b>–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: </b><code>{UserDB.GetTONWallet()}</code>\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: </b><code>{UserDB.GetAllInfo(chatId)[3]}</code>";
                return text;
            }
            else if(nftNumber >= 5 && nftNumber < 10)
            {
                price = 49;
                totalPrice = price * nftNumber;
                UserDB.UpdateTotalPrice(chatId, totalPrice);
                text = $"<b>üìé –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É {nftNumber} NFT.</b>\n\n<b>–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏: </b><code>{price} TON / 1 —à—Ç.</code>\n<b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: </b><code>{totalPrice}</code><b> TON.</b>\n\n<b>–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–û–ø–ª–∞—Ç–∏—Ç—å</b> –∏–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:</b>\n<b>–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: </b><code>{UserDB.GetTONWallet()}</code>\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: </b><code>{UserDB.GetAllInfo(chatId)[3]}</code>";
                return text;
            }
            else if(nftNumber >= 10 && nftNumber < 15)
            {
                price = 44;
                totalPrice = price * nftNumber;
                UserDB.UpdateTotalPrice(chatId, totalPrice);
                text = $"<b>üìé –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É {nftNumber} NFT.</b>\n\n<b>–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏: </b><code>{price} TON / 1 —à—Ç.</code>\n<b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: </b><code>{totalPrice}</code><b> TON.</b>\n\n<b>–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–û–ø–ª–∞—Ç–∏—Ç—å</b> –∏–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:</b>\n<b>–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: </b><code>{UserDB.GetTONWallet()}</code>\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: </b><code>{UserDB.GetAllInfo(chatId)[3]}</code>";
                return text;
            }
            else if(nftNumber >= 15)
            {
                price = 39;
                totalPrice = price * nftNumber;
                UserDB.UpdateTotalPrice(chatId, totalPrice);
                text = $"<b>üìé –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É {nftNumber} NFT.</b>\n\n<b>–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏: </b><code>{price} TON / 1 —à—Ç.</code>\n<b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: </b><code>{totalPrice}</code><b> TON.</b>\n\n<b>–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–û–ø–ª–∞—Ç–∏—Ç—å</b> –∏–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:</b>\n<b>–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: </b><code>{UserDB.GetTONWallet()}</code>\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: </b><code>{UserDB.GetAllInfo(chatId)[3]}</code>";
                return text;
            }
            else
            {
                return "";
            }
        }

        private static void GenerateIdentifier(long chatId)
        {
            char[] letters = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".ToCharArray();

            Random rand = new Random();

            // –î–µ–ª–∞–µ–º —Å–ª–æ–≤–∞.
            string identifier = "";
            for (int i = 1; i <= 15; i++)
            {
                int letterNum = rand.Next(0, letters.Length - 1);
                identifier += letters[letterNum];
            }
            UserDB.UpdateIdentifier(chatId, identifier);
        }

        private static bool CheckWalletRight(string wallet)
        {
            if(wallet.Length==48)
            {
                foreach(var letter in wallet)
                {
                    if(Config.walletSymbols.Contains(letter)){  }
                    else{return false;}
                }
                return true;
            }
            else
            {
                return false;
            }
        }

        private static bool CheckSubChannel(string chatMember)
        {
            if(chatMember != "Left")
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    }
}
